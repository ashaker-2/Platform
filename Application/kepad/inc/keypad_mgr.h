/**
 * @file keypad_mgr.h
 * @brief Header file for the Keypad Manager (KeypadMgr) module.
 *
 * This module is responsible for scanning the physical keypad, debouncing inputs,
 * detecting button press/release/hold events, and translating them into
 * System Manager events.
 */

#ifndef KEYPAD_MGR_H
#define KEYPAD_MGR_H

#include <stdint.h>  // For uint types
#include <stdbool.h> // For bool type
#include "sys_mgr.h" // For SysMgr_Event_t

// --- Keypad Button Identifiers ---
/**
 * @brief Enumeration for unique IDs of physical buttons on the keypad.
 * Adjust these IDs based on your specific keypad layout.
 */
typedef enum
{
    KEYPAD_BUTTON_0 = 0,
    KEYPAD_BUTTON_1,
    KEYPAD_BUTTON_2,
    KEYPAD_BUTTON_3,
    KEYPAD_BUTTON_MODE_AUTO,    // Button for selecting Automatic mode
    KEYPAD_BUTTON_MODE_HYBRID,  // Button for selecting Hybrid mode
    KEYPAD_BUTTON_MODE_MANUAL,  // Button for selecting Manual mode
    KEYPAD_BUTTON_UP,           // Generic 'Up' button for menu navigation/value increment
    KEYPAD_BUTTON_DOWN,         // Generic 'Down' button for menu navigation/value decrement
    KEYPAD_BUTTON_ENTER,        // Generic 'Enter' button
    KEYPAD_BUTTON_MAX           /**< Total number of physical buttons */
} Keypad_Button_ID_t;

// --- Keypad Event Types ---
/**
 * @brief Enumeration for types of events generated by a button.
 */
typedef enum
{
    KEYPAD_EVENT_NONE = 0,    /**< No event (default/initial state) */
    KEYPAD_EVENT_PRESS,       /**< Button was pressed (initial press after debounce) */
    KEYPAD_EVENT_RELEASE,     /**< Button was released */
    KEYPAD_EVENT_HOLD,        /**< Button is being held down */
    KEYPAD_EVENT_MAX
} Keypad_Event_Type_t;

// --- Keypad Event Structure ---
/**
 * @brief Structure to represent a keypad event.
 */
typedef struct
{
    Keypad_Button_ID_t button_id;   /**< The ID of the button that generated the event */
    Keypad_Event_Type_t event_type; /**< The type of event (PRESS, RELEASE, HOLD) */
} Keypad_Event_t;


// --- Function Prototypes ---

/**
 * @brief Initializes the Keypad Manager module.
 * This function must be called once at system startup.
 * @return Status_t E_OK if successful, otherwise an error code.
 */
Status_t KeypadMgr_Init(void);

/**
 * @brief Main function of the Keypad Manager module.
 * This function should be called periodically (e.g., from an RTOS task or main loop).
 * It handles keypad scanning, debouncing, and event generation.
 */
void KeypadMgr_MainFunction(void);

/**
 * @brief Retrieves the last detected keypad event.
 * Note: This might not be the primary way events are handled; often, events are
 * directly passed to other modules (like SysMgr) within KeypadMgr_MainFunction.
 * @param event_out Pointer to store the last detected event.
 * @return Status_t E_OK if a valid event was retrieved, E_DATA_STALE if no new event.
 */
Status_t KeypadMgr_GetLastEvent(Keypad_Event_t *event_out);

#endif // KEYPAD_MGR_H
