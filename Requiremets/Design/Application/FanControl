# **Detailed Design Document: FanControl Component**

## **1. Introduction**

### **1.1. Purpose**

This document details the design of the FanControl component. Its primary purpose is to provide a high-level interface for controlling the cooling fans (e.g., variable speed fans or multi-stage fans) within the environmental monitoring and control system. It abstracts the complexities of the underlying PWM (Pulse Width Modulation) or GPIO (General Purpose Input/Output) drivers, allowing systemMgr to command fan speed or state without needing to know hardware specifics.

### **1.2. Scope**

The scope of this document covers the fan module's architecture, functional behavior, interfaces, dependencies, and resource considerations. It details how fan receives control commands from systemMgr (via RTE services) and interacts with the underlying MCAL_PWM or MCAL_GPIO drivers for physical fan control.

### **1.3. References**

* Software Architecture Document (SAD) - Smart Device Firmware (Final Version)  
* Detailed Design Document: RTE  
* Detailed Design Document: MCAL_PWM  
* Detailed Design Document: MCAL_GPIO  
* Fan Motor Datasheet (Conceptual)

## **2. Functional Description**

The FanControl component provides the following core functionalities:

1. **Initialization**: Initialize the fan control hardware (e.g., PWM channels, GPIO pins) to a safe default state (e.g., fan off).  
2. **Set Fan Speed**: Set the operating speed of a fan, typically as a percentage (0-100%) for PWM-controlled fans, or by activating specific relays for multi-stage fans.  
3. **Get Fan Speed**: Retrieve the currently commanded fan speed.  
4. **Error Reporting**: Report any failures during fan control (e.g., PWM initialization failure, invalid speed command) to the SystemMonitor via RTE_Service_SystemMonitor_ReportFault().

## **3. Non-Functional Requirements**

### **3.1. Performance**

* **Responsiveness**: Fan speed changes should be applied promptly after a command.  
* **Smooth Control**: For PWM-controlled fans, speed transitions should be smooth to avoid abrupt changes or motor stress.

### **3.2. Memory**

* **Minimal Footprint**: The fan module shall have a minimal memory footprint.

### **3.3. Reliability**

* **Robustness**: The module shall be robust against invalid speed commands or underlying hardware failures.  
* **Fail-Safe**: In case of critical errors, the fan should revert to a safe state (e.g., off or full speed if cooling is critical).

## **4. Architectural Context**

As per the SAD (Section 3.1.2, Application Layer), fan resides in the Application Layer. It receives fan control commands from systemMgr (via RTE_Service_FAN_SetSpeed()). It then interacts with the appropriate MCAL drivers (MCAL_PWM for variable speed, MCAL_GPIO for on/off or multi-stage relays) to control the physical fan hardware.

## **5. Design Details**

### **5.1. Module Structure**

The FanControl component will consist of the following files:

* FanControl/inc/fan.h: Public header file containing function prototypes and fan-specific definitions.  
* FanControl/src/fan.c: Source file containing the implementation of fan control logic.  
* FanControl/cfg/fan_cfg.h: Configuration header for fan type, control pins/channels, and default states.

### **5.2. Public Interface (API)**

// In FanControl/inc/fan.h
```c
#include "Application/common/inc/app_common.h" // For APP_Status_t  
#include <stdint.h> // For uint8_t

// --- Public Functions ---

/**  
 * @brief Initializes the Fan module and its associated hardware.  
 * Sets the fan to a safe default state (e.g., off).  
 * @return APP_OK on success, APP_ERROR on failure.  
 */  
APP_Status_t FAN_Init(void);

/**  
 * @brief Sets the speed of the cooling fan.  
 * For PWM-controlled fans, speed_percent typically ranges from 0 (off) to 100 (full speed).  
 * For multi-stage fans, this might map to specific relay combinations.  
 * @param speed_percent The desired fan speed in percentage (0-100).  
 * @return APP_OK on success, APP_ERROR on failure.  
 */  
APP_Status_t FAN_SetSpeed(uint8_t speed_percent);

/**  
 * @brief Gets the currently commanded fan speed.  
 * @param speed_percent Pointer to store the current fan speed in percentage (0-100).  
 * @return APP_OK on success, APP_ERROR on failure.  
 */  
APP_Status_t FAN_GetSpeed(uint8_t *speed_percent);

// Add API for reading fan RPM/feedback if applicable  
// APP_Status_t FAN_GetRPM(uint16_t *rpm);
```

### **5.3. Internal Design**

The FanControl module will maintain the current commanded fan speed internally. It will translate the requested speed percentage into appropriate PWM duty cycles or GPIO states and interact with the MCAL layer.

1. **Initialization (FAN_Init)**:  
   * **Control Hardware Init**:  
     * If FAN_CONTROL_TYPE_PWM is configured: Call MCAL_PWM_Init() for the configured PWM channel (FAN_PWM_CHANNEL).  
     * If FAN_CONTROL_TYPE_RELAY_STAGES is configured: Call MCAL_GPIO_Init() for all associated relay pins (FAN_RELAY_STAGE_X_PIN).  
   * Set the fan to its default safe state (e.g., FAN_SetSpeed(0) to turn it off).  
   * If any underlying MCAL initialization fails, report FAULT_ID_FAN_INIT_FAILED to SystemMonitor via RTE_Service_SystemMonitor_ReportFault().  
   * Return APP_OK.  
2. **Set Fan Speed (FAN_SetSpeed)**:  
   * Validate speed_percent (ensure it's within 0-100). If invalid, report FAULT_ID_FAN_INVALID_SPEED_CMD to SystemMonitor.  
   * Update an internal static uint8_t current_fan_speed_percent;.  
   * **Control Logic based on FAN_CONTROL_TYPE**:  
     * If FAN_CONTROL_TYPE_PWM:  
       * Calculate the PWM duty cycle based on speed_percent and PWM_MAX_DUTY_CYCLE.  
       * Call MCAL_PWM_SetDutyCycle(FAN_PWM_CHANNEL, calculated_duty_cycle).  
     * If FAN_CONTROL_TYPE_RELAY_STAGES:  
       * Map speed_percent to specific relay combinations (e.g., 0% = all off, 33% = Stage 1 on, 66% = Stage 2 on, 100% = Stage 3 on).  
       * Call MCAL_GPIO_SetState() for the relevant relay pins.  
   * If any underlying MCAL call fails, report FAULT_ID_FAN_CONTROL_ERROR to SystemMonitor.  
   * Return APP_OK.  
3. **Get Fan Speed (FAN_GetSpeed)**:  
   * Validate speed_percent pointer.  
   * Copy the current_fan_speed_percent to the provided pointer.  
   * Return APP_OK.

**Sequence Diagram (Example: systemMgr Sets Fan Speed - PWM Control):**
```mermaid
sequenceDiagram  
    participant SystemMgr as Application/systemMgr  
    participant RTE as Runtime Environment  
    participant Fan as FanControl  
    participant MCAL_PWM as MCAL/PWM  
    participant SystemMonitor as Application/SystemMonitor

    SystemMgr->>RTE: RTE_Service_FAN_SetSpeed(75)  
    RTE->>Fan: FAN_SetSpeed(75)  
    Fan->>Fan: Validate speed_percent  
    Fan->>Fan: Update internal current_fan_speed_percent = 75  
    Fan->>Fan: Calculate PWM duty cycle (e.g., 75% of max)  
    Fan->>MCAL_PWM: MCAL_PWM_SetDutyCycle(FAN_PWM_CHANNEL, calculated_duty_cycle)  
    alt MCAL_PWM_SetDutyCycle returns APP_ERROR  
        MCAL_PWM--xFan: Return APP_ERROR  
        Fan->>SystemMonitor: RTE_Service_SystemMonitor_ReportFault(FAULT_ID_FAN_CONTROL_ERROR, SEVERITY_HIGH, 0)  
        Fan--xRTE: Return APP_ERROR  
        RTE--xSystemMgr: Return APP_ERROR  
    else MCAL_PWM_SetDutyCycle returns APP_OK  
        MCAL_PWM-->>Fan: Return APP_OK  
        Fan-->>RTE: Return APP_OK  
        RTE-->>SystemMgr: Return APP_OK  
    end
```

### **5.4. Dependencies**

* **Application/common/inc/app_common.h**: For APP_Status_t.  
* **Application/logger/inc/logger.h**: For logging fan control events and errors.  
* **Application/SystemMonitor/inc/system_monitor.h**: For SystemMonitor_FaultId_t (e.g., FAULT_ID_FAN_INIT_FAILED).  
* **Rte/inc/Rte.h**: For calling RTE_Service_SystemMonitor_ReportFault().  
* **Mcal/pwm/inc/mcal_pwm.h**: If using PWM for fan control.  
* **Mcal/gpio/inc/mcal_gpio.h**: If using GPIOs for multi-stage fan control.

### **5.5. Error Handling**

* **Initialization Failure**: If PWM or GPIO initialization fails, FAULT_ID_FAN_INIT_FAILED is reported to SystemMonitor.  
* **Invalid Speed Command**: If FAN_SetSpeed receives an invalid speed_percent (e.g., >100), FAULT_ID_FAN_INVALID_SPEED_CMD is reported.  
* **Control Hardware Failure**: If MCAL_PWM_SetDutyCycle() or MCAL_GPIO_SetState() returns an error, FAULT_ID_FAN_CONTROL_ERROR is reported.  
* **Fail-Safe**: In a critical system fault (managed by systemMgr and SystemMonitor), systemMgr would command FAN_SetSpeed(0) (or 100 if cooling is a critical fail-safe, depending on system design) via RTE.

### **5.6. Configuration**

The FanControl/cfg/fan_cfg.h file will contain:

* **Fan Control Type**: Define FAN_CONTROL_TYPE_PWM or FAN_CONTROL_TYPE_RELAY_STAGES.  
* **For PWM Control**:  
  * FAN_PWM_CHANNEL: The specific PWM channel ID.  
  * FAN_PWM_FREQUENCY_HZ: The PWM frequency (e.g., 25000 Hz for silent operation).  
  * FAN_PWM_MAX_DUTY_CYCLE: The maximum duty cycle value (e.g., 255 for 8-bit PWM, 1023 for 10-bit).  
* **For Relay Stages Control**:  
  * FAN_RELAY_STAGE_1_PIN, FAN_RELAY_STAGE_2_PIN, etc.  
  * Mapping of speed_percent ranges to relay states.  
* **Default State**: FAN_DEFAULT_SPEED_PERCENT (e.g., 0).

// Example: FanControl/cfg/fan_cfg.h
```c
// Choose fan control type  
#define FAN_CONTROL_TYPE_PWM            1  
#define FAN_CONTROL_TYPE_RELAY_STAGES   0

#if FAN_CONTROL_TYPE_PWM  
#define FAN_PWM_CHANNEL                 MCAL_PWM_CHANNEL_0  
#define FAN_PWM_FREQUENCY_HZ            25000 // 25 kHz  
#define FAN_PWM_MAX_DUTY_CYCLE          1023  // For 10-bit PWM resolution  
#elif FAN_CONTROL_TYPE_RELAY_STAGES  
#define FAN_RELAY_STAGE_1_PIN           18  
#define FAN_RELAY_STAGE_2_PIN           19  
// Define more pins for more stages  
#endif

#define FAN_DEFAULT_SPEED_PERCENT       0 // Fan is off by default
```

### **5.7. Resource Usage**

* **Flash**: Low.  
* **RAM**: Very low, primarily for current_fan_speed_percent.  
* **CPU**: Very low. PWM updates are typically hardware-accelerated, and GPIO toggling is fast.

## **6. Test Considerations**

### **6.1. Unit Testing**

* **Mock Dependencies**: Unit tests for fan will mock MCAL_PWM_Init(), MCAL_PWM_SetDutyCycle(), MCAL_GPIO_Init(), MCAL_GPIO_SetState(), and RTE_Service_SystemMonitor_ReportFault().  
* **Test Cases**:  
  * FAN_Init: Verify correct MCAL initialization calls and default fan state. Test initialization failure and fault reporting.  
  * FAN_SetSpeed:  
    * Test with valid speed_percent values (0, 50, 100). Mock MCAL calls to verify correct duty cycle/GPIO states are commanded.  
    * Test with invalid speed_percent values (e.g., 101, -1). Verify FAULT_ID_FAN_INVALID_SPEED_CMD is reported.  
    * Test underlying MCAL failures (e.g., MCAL_PWM_SetDutyCycle returns APP_ERROR) and verify FAULT_ID_FAN_CONTROL_ERROR is reported.  
  * FAN_GetSpeed: Verify it returns the last commanded speed.

### **6.2. Integration Testing**

* **Fan-MCAL Integration**: Verify that fan correctly interfaces with the actual MCAL_PWM or MCAL_GPIO drivers and the physical fan hardware.  
* **Visual/Audible Verification**: Observe the fan's behavior (speed changes, on/off) in response to commands.  
* **SystemMgr Control**: Verify that systemMgr can effectively control the fan via RTE_Service_FAN_SetSpeed().  
* **Fault Injection**: Disconnect the fan or cause a PWM/GPIO output short and verify that fan reports FAULT_ID_FAN_CONTROL_ERROR (if feedback mechanisms are in place, otherwise it's a passive module).

### **6.3. System Testing**

* **End-to-End Control Loop**: Verify that the system's overall control loop (sensor read -> systemMgr logic -> fan control) functions correctly across the entire operational temperature range.  
* **Stress Testing**: Rapidly change fan speeds to ensure stability and smooth operation.  
* **Long-Term Operation**: Run the system for extended periods to ensure fan control reliability.
